filetype plugin indent on
" ========================== general setting ==========================

set nu rnu              " Absolute + Relative number simutaneously
set ruler               " Show current cursor's positin (rows, cols)
set encoding=utf-8      " Encoding, default utf-8
set nowrap              " Nowrap to navigate code
set mouse=c             " Command line (mouse=a allows mouse operation)
set smartcase
set autoindent          " Auto-indent
set expandtab           " Expand tab with whitesapce
set tabstop=2           " Use 2 whitespace to expand tab
set softtabstop=2       " Use 2 whitespace to expand tab
set shiftwidth=2        " Use 2 whitespace to expand tab
set background=dark     " Background color, default dark
set t_Co=256            " Force vim into 256 color mode

" <Leader> == ','
let g:mapleader=","

set foldmethod=indent
set nofoldenable        " not fold when opening a new file
set foldlevelstart=20   " Toggle folding
" set foldlevel=20
nnoremap <Space>   za

" Allowing cursor moving in insert mode
inoremap <C-H> <Left>
inoremap <C-L> <Right>
inoremap <C-J> <Down>
inoremap <C-K> <Up>

" Goto the start or end of current line
nnoremap <C-H> 0
nnoremap <C-L> $

" Highlight 80th line, and make it gray color
highlight ColorColumn ctermbg=gray
set colorcolumn=80

" Save current file
no ,s :update<CR>
" Show all bookmarks
nn ,m :marks<ENTER>

" Show all whitespace and tabs
set list listchars=trail:â€¢
" Resolve performance problems (memory leak)
autocmd BufWinLeave * call clearmatches()

" Using make command requires twice comfiming, add cmdheight to
" show more message, set shortmess also can short the out message.
set cmdheight=1
set shortmess=a

" ======================== general setting  end =======================


" ======================= Searching Settting ==========================

"set showmatch           " Show all matching (searching)
"set ignorecase          " Ignore case when searching or mathcing
"set incsearch           " Increse search when searching
"set hlsearch            " Hightlight the searching or matching

" ===================== Searching Settting End ========================


" ========================= nerdtree plugin ===========================

" Using ,ne to show NERDTree Plugin
nn <silent> ,ne :NERDTree<CR>
" ,r to switch to directory tree
nn <silent> ,r  :NERDTreeFind<CR>

let NERDTreeIgnore = ['\.o$', '\.swp$', '\.png$']

" NERDTree use relative numbers
let NERDTreeShowLineNumbers=1
autocmd FileType nerdtree setlocal relativenumber
autocmd BufWinEnter * NERDTreeFind

" Enter vim and open NERDTree and focus on file eidting area.
for f in argv()
  if ! isdirectory(f)
    autocmd VimEnter * NERDTree | wincmd p
  endif
endfor

" ======================= nerdtree plugin end =========================


" ========================== tagbar plugin ============================

let g:tagbar_ctags_bin = "/usr/local/ctags/bin/ctags"
nmap <F8> :TagbarToggle<CR>
nnoremap <silent> ,t :TagbarOpen j<CR>

" relative line number, 0 don't show linenubmer, 1 absolute linenumbers
let g:tagbar_show_linenumbers = 2

" ======================== tagbar plugin end ===========================


" ========================= airline plugin =============================

let g:airline#extensions#default#layout = [
  \ [ 'a', 'b', 'c' ],
  \ [ 'z', 'error', 'warning' ]
  \ ]

" ======================= airline plugin end ===========================

" ========================== ctrlp plugin ==============================

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

" Ignore b[B]uild directory
set wildignore+=*/build/*,*/Build/*

let g:ctrlp_custom_ignore = {
  \ 'dir': '\v[\/]\.(dir|git)$',
  \ 'file': '\v\.(a|bin|cmake|make|o|out|so|swp)$'
  \ }

" ========================= ctrlp plugin end ============================


" =========================== highlight cpp =============================

let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_simple_template_highlight = 1

" ========================= highlight cpp end ===========================

" ========================== tmuxline plugin ============================

let g:tmuxline_preset = {
  \'a'    : '#S',
  \'win'  : ['#I', '#W'],
  \'cwin' : ['#I', '#W', '#F'],
  \ }

" ======================== tmuxline plugin end ==========================

" =========================== vim-easy-align ============================

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" ========================== vim-easy-align end ==========================


" =========================== programming ==============================

if has("autocmd")
  " If the filetype is Makefile then we need to use tabs.
  " so do not expand tabs into space.
  autocmd FileType make       set noexpandtab

  " Auto indent according to filetype, personal preference.
  autocmd FileType html       setlocal shiftwidth=4 tabstop=4
  autocmd FileType java       setlocal shiftwidth=4 tabstop=4
  autocmd FileType javascript setlocal shiftwidth=2 tabstop=2
  autocmd FileType python     setlocal shiftwidth=4 tabstop=4
endif

" Auto-complete closing character
ino "      ""<left>
ino ";     "";<left><left>
"ino '      ''<left>
ino (      ()<left>
ino (;     ();<left><left>
ino [      []<left>
ino {      {}<left>
ino {<CR>  {<CR>}<ESC>O
ino {;<CR> {<CR>};<ESC>O

" Python runing current script and read output to vim
nn <silent> ,py :r! python %

" C, C++ header file add macro automatically
function! s:insert_gates()
  let gatename = substitute(toupper(expand("%:t")), "\\.", "_", "g")
  execute "normal! i#ifndef _" . gatename . "_"
  execute "normal! o#define _" . gatename . "_"
  execute "normal! Go#endif /* _" . gatename . "_ */"
  execute "normal! 2Go"
  write
endfunction
autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()

" ========================= programming end ===========================


" ============================= macros ================================

function! CppMain()
  call append("$", "int main(int argc, char** argv)")
  call append("$", "{")
  call append("$", "  return 0;")
  call append("$", "}")
  execute "normal! 2j"
endfunction
command Cppmain :call CppMain()

" =========================== macros end ===============================
